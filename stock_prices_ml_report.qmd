---
title: "Tech Stock Price Forecasting"
author: "Keith Post"
date: last-modified 
execute:
  echo: false
  warning: false
  message: false
format: html
jupyter: python3
tbl-cap-location: top
---

```{python setup}

%%capture

#import packages
from pathlib import Path
import os
import sys
import matplotlib.pyplot as plt
from great_tables import GT
from IPython.display import display, HTML

#change wd
root = '/Users/keithpost/Documents/Python/Python projects/stock_prices_ml_py/'
code_dir = Path(root) / 'code'
os.chdir(code_dir)
new_cwd = Path.cwd()
sys.path.append(str(code_dir))

#source other scripts
from _00_helper_fns import format_number_gt
import _01_data_initial_clean_check_eda as _01
import _02_prepare_fit_models as _02
# import _03_model_forecast_diagnostics as _03

```


## Background

<!-- INSERT BACKGROUND INFO -->




## Exploratory Data Analysis

Here are summary stats for each stock over the period of training data.

::: {.panel-tabset}
### Apple

```{python tab1a-aapl overall summ stats}
#| tbl-cap:
#| - "Table 1a: Summary statistics of Apple stock from 2016-2018"

gt_aapl_summ_stats = format_number_gt(df=_01.df_describe,
                                      col_range=[1, 7],
                                      prefix='aapl_')

display(gt_aapl_summ_stats)

```

### Microsoft

```{python tab1b-msft overall summ stats}
#| tbl-cap:
#| - "Table 1b: Summary statistics of Microsoft stock from 2016-2018"
gt_msft_summ_stats = format_number_gt(df=_01.df_describe,
                                      col_range=[7, 13],
                                      prefix='msft_')

display(gt_msft_summ_stats)

```


### Amazon

```{python tab1c-amzn overall summ stats}
#| tbl-cap:
#| - "Table 1c: Summary statistics of Amazon stock from 2016-2018"
gt_amzn_summ_stats = format_number_gt(df=_01.df_describe,
                                      col_range=[13, 19],
                                      prefix='amzn_')

display(gt_amzn_summ_stats)

```


### Google

```{python tab1d-goog overall summ stats}
#| tbl-cap:
#| - "Table 1d: Summary statistics of Google stock from 2016-2018"
gt_goog_summ_stats = format_number_gt(df=_01.df_describe,
                                      col_range=[19, 25],
                                      prefix='goog_')

display(gt_goog_summ_stats)

```

:::


:::{.panel-tabset}
### Apple

```{python tab2a-aapl adj closing yr stats}
#| tbl-cap:
#| - "Table 2a: Summary statistics of Apple stock adjusted closing prices by year from 2016-2018"

display(GT(_01.df_aapl_ac_yr))

```


### Microsoft

```{python tab2b-msft adj closing yr stats}
#| tbl-cap:
#| - "Table 2b: Summary statistics of Microsoft stock adjusted closing prices by year from 2016-2018"

display(GT(_01.df_msft_ac_yr))

```


### Amazon

```{python tab2c-amzn adj closing yr stats}
#| tbl-cap:
#| - "Table 2c: Summary statistics of Amazon stock adjusted closing prices by year from 2016-2018"

display(GT(_01.df_amzn_ac_yr))

```


### Google

```{python tab2d-goog adj closing yr stats}
#| tbl-cap:
#| - "Table 2d: Summary statistics of Google stock adjusted closing prices by year from 2016-2018"

display(GT(_01.df_goog_ac_yr))

```

:::


The daily, adjusted closing stock prices were plotted for the four tech stocks--*aapl*, *msft*, 
*amzn*, and *goog*--from 2016 through 2018.

```{python fig1-adj closing prices over time}
#| fig-cap: 
#| - "Figure 1: Adjusted closing prices of the four technology stocks from 2016-2018"

display(_01.plot_acp_time)
plt.close()

```

The four stocks show a similar pattern in their adjusted closing prices over the time period observed (Fig. 1). There is steady growth in 2016 followed by greater growth the following year. In the first half of 2018, the growth continues but adjusted closing prices decline for all four stocks for the remainder of 2018.

<br>

The stock prices were log-transformed to reduce variances to more clearly show their growth patterns.

```{python fig2-log adj closing prices over time}
#| fig-cap: 
#| - "Figure 2: Log-transformed adjusted closing prices of the four technology stocks from 2016-2018"

display(_01.plot_log_acp_time)
plt.close()

```

Similar to the untransformed adjusted closing prices (Fig. 1), the log-transformed values exhibit the same pattern with growth from 2016 to mid-2018 before a decline (Fig. 2).

<br>

The trading volume was also plotted over this time period for the four technology stocks.

```{python fig3-volume over time}
#| fig-cap: 
#| - "Figure 3: Trading volumes of the four technology stocks from 2016-2018"

display(_01.plot_vol_time)
plt.close()

```

In general, *amzn* and *aapl* had greater trading volumes than *goog* and *msft* from 2016-2018 (Fig. 3). All four stocks had their highest volumes in early 2016 and late 2018.

<br>

Distributions of data were visualized using boxplots. 

```{python fig4-boxplot adj closing prices}
#| fig-cap: 
#| - "Figure 4: Boxplots of adjusted closing prices of the four technology stocks from 2016-2018"

display(_01.plot_box_acp)
plt.close()

```

*msft* has far greater median adjusted closing prices than the other three stocks, while *aapl* and *goog* have smaller inter-quartile ranges than *aapl* and *amzn* (Fig. 4). There are no outliers present for any tech stock.

<br>

In addition to daily adjusted closing prices, the return, or daily percent change in these values, can be a helpful metric in understanding a stock. When combined with risk, or the standard deviation in returns, the relationship between these two metrics can be visualized. This is done for all four stocks over each year of data.

```{python fig5-return risk}
#| fig-cap:
#| - "Figure 5: Risk-return plots of each technology stock for 2016-2018 by year"

display(_01.plot_ret_risk)
plt.close()

```

Overall, return:risk were strong in 2017, subpar in 2016, and mixed in 2018 (Fig. 5). On average, *amzn* performed the strongest, while *goog* performed the weakest.

<br>

Correlations of returns were calculated using Pearson correlations.

```{python fig6-return corr}
#| fig-cap:
#| - "Figure 6: Heatmap of bivariate correlations of returns of the four technnology stocks from 2016-2018"

display(_01.plot_heatmap_corr)
plt.close()

```

All pairs of tech stocks exhibit moderate correlations (0.5 < *r* < 0.8) of returns from 2016-2018 (Fig. 6).


## Data Transformation and Stationarity
The adjusted closing stock prices of all four technology stocks were (natural) log transformed to help stabilize their variances and improve normality of residuals. Following transformation, each stock was assessed for stationarity via Augmented Dickey-Fuller tests. 

```{python tab3-ad fuller results}
#| tbl-cap: 
#| - "Table 3: Results of Augmented Dickey-Fuller tests on log-transformed adjusted closing prices" 

display(GT(_02.df_adfuller_results))

```

The test results indicate that the log-transformed adjusted closing prices for all four tech stocks are not stationary because no p-value < 0.05 (Table 3). Thus, first-order differencing was applied and a second set of Augmented Dickey-Fuller tests were re-run.

```{python tab4-ad fuller results on diff data}
#| tbl-cap:
#| - "Table 4: Results of Agumented Dickey-Fuller tests on differenced log-transformed adjusted closing prices"

display(GT(_02.df_diff_adfuller_results))

```

All four stocks exhibited stationarity of their differenced log-transformed adjusted closing prices per the results of the Augmented Dickey-Fuller tests (Table 4).


## Identify Starting ARIMA Parameters
The initial parameters for the ARIMA models for each stock were chosen by reviewing the partial autocorrelation and autocorrelation plots.

::: {.panel-tabset}
### Partial Autocorrelation

```{python fig7a-initial partial autocorr}
#| fig-cap:
#| - "Figure 7a: Partial autocorrelations of differenced log-transformed closing stock prices of four tech stocks from 2016-2018"

display(_02.plot_initial_pacf)
plt.close()

```


### Autocorrelation

```{python fig7b-initial autocorr}
#| fig-cap:
#| - "Figure 7b: Autocorrelations of differenced log-transformed closing stock prices of four tech stocks from 2016-2018"

display(_02.plot_initial_acf)
plt.close()

```

:::

The partial autocorrelation (Fig. 7a) and autocorrelation (Fig. 7b) plots indicate the following initial parameters: 

<span style="color:gray;">Table 3: *p*, *d*, and *q* initial parameters for ARIMA models of the four tech stocks</span>

stock|symbol | *p*| *d*| *q*
-----|---|---|---|---:
Apple|aapl|0|1|0
Microsoft|msft|2|1|1
Amazon|amzn|0|1|0
Google|goog|0|1|0


## Model Fitting and Selection
ARIMA models were run on each stock using the initial parameters. Parameter values were adjusted after assessing autocorrelation and parameter significance with the goal of the most parsimonious ARIMA model that fits the data. ARIMA models with the following parameters were selected as a result of this process.

<span style="color:gray;">Table 4: *p*, *d*, and *q* parameters selected for ARIMA models of the four tech stocks</span>

stock| symbol| *p*| *d*| *q*
-----|---|---|---|---:
Apple|aapl|0|1|1
Microsoft|msft|2|1|1
Amazon|amzn|1|1|1
Google|goog|0|1|1


Residuals from ARIMA models were assessed for heteroscedasticity, normality, partial autocorrelation, and autocorrelation.


::: {.panel-tabset}
### Apple

::: {.panel-tabset}
#### Heteroscedasticity and normality

```{python fig8a-aapl resid var norm}
#| fig-cap:
#| - "Figure 8a: Assessments of heteroscedasticity and normality of residuals from selected ARIMA model for aapl" 

display(_02.plot_aapl_var_norm)
plt.close()

```


#### Partial autocorrelation and autocorrelation
  
```{python fig8b-aapl resid partial full autocorr}
#| fig-cap:
#| - "Figure 8b: Partial autocorrelations and autocorrelations of residuals from selected ARIMA model for aapl"

display(_02.plot_aapl_resid_pacf_acf)
plt.close()

```

:::

### Microsoft

::: {.panel-tabset}
#### Heteroscedasticity and normality

```{python fig9a-msft resid var norm}
#| fig-cap:
#| - "Figure 9a: Assessments of heteroscedasticity and normality of residuals from selected ARIMA model for msft"

display(_02.plot_msft_var_norm)
plt.close()

```


#### Partial autocorrelation and autocorrelation

```{python fig9b-msft resid partial full autocorr}
#| fig-cap:
#| - "Figure 9b: Partial autocorrelations and autocorrelations of residuals from selected ARIMA model for msft"

display(_02.plot_msft_resid_pacf_acf)
plt.close()

```

:::

### Amazon

::: {.panel-tabset}
#### Heteroscedasticity and normality

```{python fig10a-amzn resid var norm}
#| fig-cap:
#| - "Figure 10a: Assessments of heteroscedasticity and normality of residuals from selected ARIMA model for amzn"

display(_02.plot_amzn_var_norm)
plt.close()

```


#### Partial autocorrelation and autocorrelation

```{python fig10b-amzn resid partial full autocorr}
#| fig-cap:
#| - "Figure 10b: Partial autocorrelations and autocorrelations of residuals from selected ARIMA model for amzn"

display(_02.plot_amzn_resid_pacf_acf)
plt.close()

```

:::

### Google

::: {.panel-tabset}
#### Heteroscedasticity and normality

```{python fig11a-goog resid var norm}
#| fig-cap:
#| - "Figure 11a: Assessments of heteroscedasticity and normality of residuals from selected ARIMA model for goog"

display(_02.plot_goog_var_norm)
plt.close()

```


#### Partial autocorrelation and autocorrelation

```{python fig11b-goog resid full partial autocorr}
#| fig-cap:
#| - "Figure 11b: Partial autocorrelations and autocorrelations of residuals from selected ARIMA model for goog"

display(_02.plot_goog_resid_pacf_acf)
plt.close()

```

:::

:::


Following these results, the final models for each tech stock are as follows.

::: {.panel-tabset}
### Apple

::: {.panel-tabset}
#### Final model summary

```{python tab5a-aapl final model summary}
#| tbl-cap: 
#| - "Table 5a: Summary information for final Apple ARIMA Model"

display(GT(_02.df_aapl_summary))

```


#### Final model parameters

```{python tab5b-aapl final model params}
#| tbl-cap: 
#| - "Table 5b: Parameter information for final Apple ARIMA Model"

display(GT(_02.df_aapl_params))

```

:::


### Microsoft

::: {.panel-tabset}
#### Final model summary

```{python tab6a-aapl final model summary}
#| tbl-cap: 
#| - "Table 6a: Summary information for final Microsoft ARIMA Model"

display(GT(_02.df_msft_summary))

```


#### Final model parameters

```{python tab6b-aapl final model params}
#| tbl-cap: 
#| - "Table 6b: Parameter information for final Microsft ARIMA Model"

display(GT(_02.df_msft_params))

```

:::


### Amazon

::: {.panel-tabset}
#### Final model summary

```{python tab7a-amzn final model summary}
#| tbl-cap: 
#| - "Table 7a: Summary information for final Amazon ARIMA Model"

display(GT(_02.df_amzn_summary))

```


#### Final model parameters

```{python tab7b-amzn final model params}
#| tbl-cap: 
#| - "Table 7b: Parameter information for final Amazon ARIMA Model"

display(GT(_02.df_amzn_params))

```

:::


### Google

::: {.panel-tabset}
#### Final model summary

```{python tab8a-goog final model summary}
#| tbl-cap: 
#| - "Table 8a: Summary information for final Google ARIMA Model"

display(GT(_02.df_goog_summary))

```


#### Final model parameters

```{python tab8b-goog final model params}
#| tbl-cap: 
#| - "Table 8b: Parameter information for final Google ARIMA Model"

display(GT(_02.df_goog_params))

```

:::

:::


## Model Forecasting



End with Forecasted versus true values plot



## Model Diagnostics



## Conclusion/Interpretation




